services:
  web:
    build:
      context: .
      dockerfile: app/Dockerfile
    command: "uvicorn app.main:app --reload --host 0.0.0.0 --port 8002"
    volumes:
      - ./app:/usr/src/app
    container_name: backend
    ports:
      - "8002:8002"
    env_file:
      - ./.env
    depends_on:
      - kafka
      - redis-node-0
      - redis-node-1
      - redis-node-2
      - rabbitmq
      - mongodb
    networks:
      - config


  kafka-consumer-1:
    build:
      context: .
      dockerfile: app/Dockerfile
    command: >
      sh -c "export PYTHONPATH=/usr/src &&
            python app/kafka_consumer_notifications_main.py & 
            celery -A app.infastructure.celery_worker worker --loglevel=info -Q email_queue -E"

    container_name: kafka-consumer-1
    depends_on:
      - kafka
      - web
      - redis-node-0
      - kafka-admin
      - rabbitmq
    networks:
      - config
    restart: always
    env_file:
      - .env
    environment:
      - CONSUMER_GROUP=notification-consumer-group
      - PYTHONPATH=/usr/src
      - CELERY_BROKER_URL=amqp://admin:admin@rabbitmq:5672/

  # kafka-consumer-2: ->>> if needed horizontal scaling
  #   build:
  #     context: .
  #     dockerfile: app/Dockerfile
  #   command: "python app/kafka_consumer_diffnotification_main.py"
  #   container_name: kafka-consumer-2
  #   depends_on:
  #     - kafka
  #     - web
  #     - redis-node-0
  #     - kafka-admin
  #   networks:
  #     - config
  #   restart: always
  #   env_file:
  #     - .env
  #   environment:
  #     - CONSUMER_GROUP1=order-consumer-group
  #     - PYTHONPATH=/usr/src
  kafka-admin:
    build:
      context: .
      dockerfile: app/Dockerfile
    command: "python app/kafka_admin_topics.py"
    container_name: kafka-admin
    depends_on:
      - kafka
    networks:
      - config
    env_file:
      - .env
    environment:
      - KAFKA_BROKER=kafka:9092
      - PYTHONPATH=/usr/src


    
  ### REDIS CLUSTER ###
  redis-node-0:
    image: redis:latest
    container_name: redis-node-0
    command: ["redis-server", "--port", "7000", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--cluster-node-timeout", "5000"]
    volumes:
      - redis_data_0:/data
    ports:
      - "7000:7000"
    networks:
      - config

  redis-node-1:
    image: redis:latest
    container_name: redis-node-1
    command: ["redis-server", "--port", "7001", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--cluster-node-timeout", "5000"]
    volumes:
      - redis_data_1:/data
    ports:
      - "7001:7001"
    networks:
      - config

  redis-node-2:
    image: redis:latest
    container_name: redis-node-2
    command: ["redis-server", "--port", "7002", "--cluster-enabled", "yes", "--cluster-config-file", "/data/nodes.conf", "--cluster-node-timeout", "5000"]
    volumes:
      - redis_data_2:/data
    ports:
      - "7002:7002"
    networks:
      - config

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    ports:
      - "9121:9121"
    command:
      - "--redis.addr=redis://redis-node-0:7000"
      - "--redis.addr=redis://redis-node-1:7001"
      - "--redis.addr=redis://redis-node-2:7002"
    networks:
      - config
    depends_on:
      - redis-node-0
      - redis-node-1
      - redis-node-2

  ### RABBITMQ ###
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # AMQP port for messaging
      - "15672:15672" # Management plugin web UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    networks:
      - config
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # celery:
  #   build:
  #     context: .  # Adjust to point to the correct directory containing Dockerfile
  #     dockerfile: app/Dockerfile
  #   container_name: celery
  #   command: celery -A app.infastructure.celery_worker  worker --loglevel=info -E
  #   volumes:
  #     - celery_volume:/usr/src/celery
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   networks:
  #     - config

  # celery_beat:
  #   build:
  #     context: .
  #     dockerfile: app/Dockerfile
  #   container_name: celery_beat
  #   command: celery -A app.celery_config.celery_app  beat --loglevel=info
  #   volumes:
  #     - ./backend:/usr/src/backend
  #     - celery_beat_volume:/usr/src/backend/celery_beat  # Added a volume for celery_beat
  #   depends_on:
  #     - rabbitmq
  #     - celery
  #   networks:
  #     - config

  ### KAFKA & ZOOKEEPER ###
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - config

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    env_file:
     - ./.env
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENER_PORT_INSIDE: 9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      PATH: "/usr/bin:${PATH}"
    networks:
      - config

  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    command: "--kafka.server=kafka:9092"
    networks:
      - config
    depends_on:
      - kafka
    restart: always
  mongodb:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - config

#Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus  # Persistent storage
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - web
      - node-exporter
    networks:
      - config
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - config
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - config
    restart: unless-stopped


volumes:
  celery_beat_volume:
  kafka_admin_volume:
  app_volume:
  mongodb_volume:
  prometheus_data:
  grafana-data:
  celery_volume:
  redis_data_0:
  redis_data_1:
  redis_data_2:

networks:
  config:
    driver: bridge
    